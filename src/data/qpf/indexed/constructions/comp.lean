
import data.qpf.indexed.mvpfunctor.basic
import data.qpf.indexed.constructions.basic

import category_theory.products

universes u

namespace mvqpf
variables {I J K : Type u}
  (F : fam I ‚•§ fam J) [q  : mvqpf F]
  (G : fam J ‚•§ fam K) [q' : mvqpf G]

open category_theory

-- def comp (v : fam J) : fam K :=
-- -- F $ Œª i : fin' n, G i v
-- Œª k : K, F.obj (Œª i : I, (G i).obj v k) _

namespace comp
open mvfunctor mvpfunctor
variables {F G} {Œ± Œ≤ : fam J} (f : Œ± ‚ü∂ Œ≤)

-- protected def mk (x : F $ Œª i, G i Œ±) : (comp F G) Œ± := x

-- protected def get (x : (comp F G) Œ±) : F $ Œª i, G i Œ± := x

-- @[simp] protected lemma mk_get (x : (comp F G) Œ±) : comp.mk (comp.get x) = x := rfl

-- @[simp] protected lemma get_mk (x : F $ Œª i, G i Œ±) : comp.get (comp.mk x) = x := rfl

-- protected def map' : (Œª (i : fin' n), G i Œ±) ‚üπ Œª (i : fin' n), G i Œ≤ :=
-- Œª i, map f

-- protected def map : (comp F G) Œ± ‚Üí (comp F G) Œ≤ :=
-- (map (Œª i, map f) : F (Œª i, G i Œ±) ‚Üí F (Œª i, G i Œ≤))

-- instance : mvfunctor (comp F G) :=
-- { map := Œª Œ± Œ≤, comp.map }

-- lemma map_mk (x : F $ Œª i, G i Œ±) :
--   f <$$> comp.mk x = comp.mk ((Œª i (x : G i Œ±), f <$$> x) <$$> x) := rfl

-- lemma get_map (x : comp F G Œ±) :
--   comp.get (f <$$> x) = (Œª i (x : G i Œ±), f <$$> x) <$$> comp.get x := rfl

include q q'

local attribute [simp] category_theory.functor.map_comp_map category_theory.functor.map_comp_map_assoc
local attribute [-simp] functor.map_comp -- functor.map_comp_assoc
-- #check box F _ _

-- lemma box_comp' {Œ± : fam I} (A : Œ† i, set (fam.unit i ‚ü∂ Œ±)) :
--   box G (box F A) ‚â§ (box (F ‚ãô G) A : Œ† i, set (fam.unit i ‚ü∂ (F ‚ãô G).obj Œ±)) :=
-- begin
--   introv i a,
--   simp only [set.mem_sep_iff,set.mem_set_of_eq,box], erw set.mem_set_of_eq,
--   { introv h‚ÇÄ h‚ÇÅ,
--     refine h‚ÇÄ _ (F.map f) (F.map g) _,
--     clear h‚ÇÄ, introv h‚ÇÇ, apply h‚ÇÇ, apply h‚ÇÅ },
-- end

-- lemma box_comp {Œ± : fam I} (A : Œ† i, set (fam.unit i ‚ü∂ Œ±)) :
--   box (F ‚ãô G) A = (box G (box F A) : Œ† i, set (fam.unit i ‚ü∂ G.obj (F.obj Œ±))) :=
-- begin
--   ext j y, simp only [set.mem_sep_iff,set.mem_set_of_eq,box], erw set.mem_set_of_eq,
--   split,
--   { introv h‚ÇÄ h‚ÇÅ,
--     specialize h‚ÇÄ,
--     -- apply repr_mono,
--     -- simp [‚Üê abs_map'], rw ‚Üê abs_map,
--     },
--   { introv h‚ÇÄ h‚ÇÅ,
--     refine h‚ÇÄ _ (F.map f) (F.map g) _,
--     clear h‚ÇÄ, introv h‚ÇÇ, apply h‚ÇÇ, apply h‚ÇÅ },
-- end

section defs

variables F G

@[simp]
def abs (Œ±) : (pfunctor.comp (P G) (P F)).obj Œ± ‚ü∂ (F ‚ãô G).obj Œ± :=
pfunctor.comp.get _ _ Œ± ‚â´ (P G).map (abs F _) ‚â´ abs G _ ‚â´ ùüô (G.obj (F.obj Œ±))

@[simp]
def repr (Œ±) : (F ‚ãô G).obj Œ± ‚ü∂ (pfunctor.comp (P G) (P F)).obj Œ± :=
ùüô (G.obj (F.obj Œ±)) ‚â´ @repr _ _ G q' _ ‚â´ (P G).map (repr F Œ±) ‚â´ pfunctor.comp.mk _ _ _

end defs

lemma abs_repr ‚¶ÉŒ±‚¶Ñ : comp.repr F G Œ± ‚â´ comp.abs F G _ = ùüô ((F ‚ãô G).obj Œ±) :=
by { intros,
  simp only [repr, abs, category.id_comp, category.comp_id, category.assoc, pfunctor.comp.mk_get_assoc, functor.map_comp_map_assoc],
  erw [functor.map_comp_map_assoc, abs_repr, category_theory.functor.map_id, category.id_comp, category.id_comp, abs_repr], refl }

lemma abs_map ‚¶ÉŒ± Œ≤‚¶Ñ (f : Œ± ‚ü∂ Œ≤) : (pfunctor.comp (P G) (P F)).map f ‚â´ comp.abs F G _ = comp.abs F G _ ‚â´ (F ‚ãô G).map f :=
by { intros, simp only [comp.abs, abs_map, functor.comp_map, pfunctor.comp.map_get_assoc, functor.map_comp_map,
     abs_map_assoc, category.comp_id, category.assoc, category_theory.functor.map_comp_map] }

instance : mvqpf (F ‚ãô G) :=
{ P         := pfunctor.comp (P G) (P F),
  abs := abs F G,
  repr := repr F G,
  abs_repr := abs_repr,
  abs_map := abs_map,
  -- box_inter := Œª Œ± A B i, by {
  --   apply congr_fun _ i, dsimp,
  --   simp [box_inter',box_comp], }
 }

end comp

end mvqpf
